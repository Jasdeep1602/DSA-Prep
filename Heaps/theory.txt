A heap is a special tree-based data structure used to implement priority queues. It comes in two main types:

üî∫ Min Heap
-The smallest element is always at the top (root).
-Every parent node is less than or equal to its children.

üîª Max Heap
-The largest element is always at the top.
-Every parent node is greater than or equal to its children.

üß† Key Properties
-It is a complete binary tree ‚Üí All levels are filled left to right.
-Implemented most commonly as an array, not a real tree.

üì¶ Array Representation Example

       10
     /    \
   15      20
  /  \
 30  40

Stored as:
[10, 15, 20, 30, 40]

-Left child of index i ‚Üí 2i + 1
-Right child of index i ‚Üí 2i + 2
-Parent of index i ‚Üí Math.floor((i - 1) / 2)

üõ† Common Operations
insert()	O(log n)	
peek()	       O(1)	
remove()      O(log n)

üß∞ Use Cases
-Priority queues (e.g., task scheduling)
-Dijkstra‚Äôs shortest path algorithm
-Heap sort
-Median-finding with two heaps


üì¶ EXAMPLE

‚û°Ô∏èStarting Array: [10, 15, 20, 17, 8, 25]
First, let's build this into a min heap. The array becomes:
[8, 10, 20, 17, 15, 25]
This represents the tree structure:
       8
     /   \
   10     20
  /  \   /
 17  15 25

‚û°Ô∏èStep 1: Pop the Top Element
-Pop: Remove 8 (the minimum)
-Replace: Move the last element (25) to the root
-Current state: [25, 10, 20, 17, 15]

‚û°Ô∏èStep 2: Heapify Down (Restore Heap Property)
-Since 25 > 10, we need to fix this:
-Compare 25 with children (10, 20): 10 is smaller, so swap
-Result: [10, 25, 20, 17, 15]
-Compare 25 with new children (17, 15): 15 is smaller, so swap
-Result: [10, 15, 20, 17, 25]

Now we have a valid min heap again.
‚û°Ô∏èStep 3: Modify the Popped Element
-Popped value: 8
-Add something: Let's say we add 5
-New value: 8 + 5 = 13

‚û°Ô∏èStep 4: Insert the Modified Value Back
-Insert 13 at the end: [10, 15, 20, 17, 25, 13]

‚û°Ô∏èStep 5: Heapify Up (Restore Heap Property)
-Since 13 < 20 (its parent), we need to bubble up:
-Compare 13 with parent 20: Swap them
-Result: [10, 15, 13, 17, 25, 20]
-Compare 13 with new parent 10: 13 > 10, so we stop
-Final Result
-Final heap: [10, 15, 13, 17, 25, 20]

The tree now looks like:
       10
     /    \
   15      13
  /  \    /
 17  25  20

